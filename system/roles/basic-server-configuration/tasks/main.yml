---
#
### BASIC SERVER CONFIGURATION ###
#
# Run basic server configuration.

# Facts
- name: Detect GIS.lab unique ID
  set_fact:
    GISLAB_UNIQUE_ID: "{{ inventory_hostname }}"

- name: Detect GIS.lab install action (new installation or upgrade)
  stat: path=/var/lib/gislab/installation.done
  register: installation_done
  changed_when: False

- name: Set GIS.lab install action variable (install)
  set_fact:
    GISLAB_INSTALL_ACTION: install
  when: installation_done.stat.exists == false

- name: Set GIS.lab install action variable (upgrade)
  set_fact:
    GISLAB_INSTALL_ACTION: upgrade
  when: installation_done.stat.exists == true


- name: Set GIS.lab installation root directory
  set_fact:
    GISLAB_ROOT: /opt/gislab

- name: Set GIS.lab worker installation root directory
  set_fact:
    GISLAB_INSTALL_WORKER_ROOT: "{{ GISLAB_ROOT }}/client-worker/root"

- name: Set GIS.lab worker image directory
  set_fact:
    GISLAB_INSTALL_WORKER_IMAGE: "{{ GISLAB_ROOT }}/client-worker/image"

- name: Set GIS.lab client installation root directory
  set_fact:
    GISLAB_INSTALL_CLIENT_ROOT: "{{ GISLAB_ROOT }}/client-desktop/root"

- name: Set GIS.lab client image directory
  set_fact:
    GISLAB_INSTALL_CLIENT_IMAGE: "{{ GISLAB_ROOT }}/client-desktop/image"


- name: Detect current date and time
  set_fact:
    GISLAB_INSTALL_DATETIME: "{{ ansible_date_time.date }}-{{ ansible_date_time.time }}"

- name: Detect provisioning user name
  set_fact:
    GISLAB_PROVISIONING_USER: "{{ ansible_ssh_user }}"

- name: Detect architecture
  set_fact:
    GISLAB_SERVER_ARCHITECTURE: "{{ ansible_architecture }}"

- name: Set GIS.lab network as list
  set_fact:
    GISLAB_NETWORK_AS_LIST: "{{ GISLAB_NETWORK|split_string('.') }}"

- name: Set GIS.lab network server IP
  set_fact:
    GISLAB_NETWORK_SERVER_IP: "{{ GISLAB_NETWORK }}.5"


# Sanity checks
# UBUNTU VERSION
- name: Fail if server is not running compatible OS version
  fail: msg="Server is not running compatible OS version Ubuntu 12.04, {{ ansible_distribution }} {{ ansible_distribution_version }} detected"
  when: ansible_distribution != "Ubuntu" or ansible_distribution_version != "12.04"


# Configuration and basic directory structure
- name: Save current GIS.lab configuration to '/etc/gislab_version' file
  copy: content='
    GISLAB_ROOT="{{ GISLAB_ROOT }}"\n
    GISLAB_ADMIN_FIRST_NAME="{{ GISLAB_ADMIN_FIRST_NAME }}"\n
    GISLAB_ADMIN_SURNAME="{{ GISLAB_ADMIN_SURNAME }}"\n
    GISLAB_ADMIN_EMAIL="{{ GISLAB_ADMIN_EMAIL }}"\n
    GISLAB_UNIQUE_ID="{{ GISLAB_UNIQUE_ID }}"\n
    GISLAB_SUITE="{{ GISLAB_SUITE }}"\n
    GISLAB_TIMEZONE="{{ GISLAB_TIMEZONE }}"\n
    GISLAB_APT_REPOSITORY_COUNTRY_MIRROR="{{ GISLAB_APT_REPOSITORY_COUNTRY_MIRROR }}"\n
    GISLAB_APT_HTTP_PROXY="{{ GISLAB_APT_HTTP_PROXY }}"\n
    GISLAB_NETWORK="{{ GISLAB_NETWORK }}"\n
    GISLAB_NETWORK_SERVER_IP="{{ GISLAB_NETWORK_SERVER_IP }}"\n
    GISLAB_DNS_SERVERS="{{ GISLAB_DNS_SERVERS }}"\n
    GISLAB_SERVER_NETWORK_DEVICE="{{ GISLAB_SERVER_NETWORK_DEVICE }}"\n
    GISLAB_SERVER_INTEGRATION_FALLBACK_IP_ADDRESS="{{ GISLAB_SERVER_INTEGRATION_FALLBACK_IP_ADDRESS }}"\n
    GISLAB_SERVER_INTEGRATION_FALLBACK_GATEWAY="{{ GISLAB_SERVER_INTEGRATION_FALLBACK_GATEWAY }}"\n
    GISLAB_SERVER_EMAIL_RELAY_SERVER="{{ GISLAB_SERVER_EMAIL_RELAY_SERVER }}"\n
    GISLAB_WORKERS_COUNT="{{ GISLAB_WORKERS_COUNT }}"\n
    GISLAB_CLIENT_LANGUAGES="{% if GISLAB_CLIENT_LANGUAGES %}{{ GISLAB_CLIENT_LANGUAGES|join(",") }}{% else %}{% endif %}"\n
    GISLAB_CLIENT_KEYBOARDS="{% if GISLAB_CLIENT_KEYBOARDS %}{{ GISLAB_CLIENT_KEYBOARDS|keyboard_layouts }}{% else %}{% endif %}"\n
    GISLAB_CLIENT_INSTALL_PACKAGES="{% if GISLAB_CLIENT_INSTALL_PACKAGES %}{{ GISLAB_CLIENT_INSTALL_PACKAGES|join(" ") }}{% else %}{% endif %}"\n
    GISLAB_CLIENT_VIRTUALBOX_SUPPORT="{{ GISLAB_CLIENT_VIRTUALBOX_SUPPORT }}"\n
    GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO="{{ GISLAB_CLIENT_VIRTUALBOX_ADDITIONS_ISO }}"\n
    GISLAB_CLIENT_NETWORK_STORAGE="{{ GISLAB_CLIENT_NETWORK_STORAGE }}"\n
    GISLAB_CLIENT_WORKER_ENABLED="{{ GISLAB_CLIENT_WORKER_ENABLED }}"\n
    GISLAB_VERSION="{{ GISLAB_VERSION }}"\n
    GISLAB_SERVER_GUI_CONSOLE="{{ GISLAB_SERVER_GUI_CONSOLE }}"\n
    GISLAB_DEBUG_INSTALL="{{ GISLAB_DEBUG_INSTALL }}"\n
    GISLAB_DEBUG_SERVICES="{{ GISLAB_DEBUG_SERVICES }}"\n
    GISLAB_CLIENT_GIS_DEVELOPMENT_SUPPORT="{{ GISLAB_CLIENT_GIS_DEVELOPMENT_SUPPORT }}"\n
    GISLAB_APT_CUSTOM_REPOSITORIES="{% if GISLAB_APT_CUSTOM_REPOSITORIES %}{{ GISLAB_APT_CUSTOM_REPOSITORIES|join(",") }}{% else %}{% endif %}"\n
    GISLAB_INSTALL_WORKER_ROOT="{{ GISLAB_INSTALL_WORKER_ROOT }}"\n
    GISLAB_INSTALL_WORKER_IMAGE="{{ GISLAB_INSTALL_WORKER_IMAGE }}"\n
    GISLAB_INSTALL_CLIENT_ROOT="{{ GISLAB_INSTALL_CLIENT_ROOT }}"\n
    GISLAB_INSTALL_CLIENT_IMAGE="{{ GISLAB_INSTALL_CLIENT_IMAGE }}"\n
    GISLAB_INSTALL_DATETIME="{{ GISLAB_INSTALL_DATETIME }}"\n
    GISLAB_PROVISIONING_USER="{{ GISLAB_PROVISIONING_USER }}"\n
    GISLAB_SERVER_ARCHITECTURE="{{ GISLAB_SERVER_ARCHITECTURE }}"'
    dest="/etc/gislab_version"

- name: Create main GIS.lab installation directories structure
  file: path="{{ item }}" state=directory
  with_items:
    - "{{ GISLAB_ROOT }}"
    - /etc/gislab
    - /var/lib/gislab
    - /etc/cron.d.bin
    - /usr/local/python-virtualenvs
    - /storage/applications


# Basic server configuration
- name: Add GISLAB_ROOT variable to server's environment
  lineinfile: dest=/etc/environment line="GISLAB_ROOT={{ GISLAB_ROOT }}" state=present


- name: Set hostname
  hostname: name=server

- name: Update hosts file
  template: src=hosts.j2 dest=/etc/hosts
  notify:
    - service rsyslog restart


- name: Generate en_US.UTF-8 locale
  locale_gen: name=en_US.UTF-8 state=present

- name: Set timezone
  template: src=timezone.j2 dest=/etc/timezone
  notify:
    - reconfigure timezone


- name: Set local aliases table
  template: src=aliases.j2 dest=/etc/aliases


- name: Configure SSH server
  template: src=ssh/sshd_config.j2 dest=/etc/ssh/sshd_config
  notify:
    - service ssh restart

- meta: flush_handlers


# networking
- name: Add GIS.lab network server IP address if not received from provider
  template: src=network/gislab.j2 dest=/etc/network/if-up.d/gislab mode=0755
  when: GISLAB_NETWORK_SERVER_IP not in ansible_all_ipv4_addresses

- name: Activate GIS.lab network server IP address
  shell: ip addr add {{ GISLAB_NETWORK_SERVER_IP }}/24 dev {{ GISLAB_SERVER_NETWORK_DEVICE }}
  args:
    executable: /bin/bash
  when: GISLAB_NETWORK_SERVER_IP not in ansible_all_ipv4_addresses

- name: Install DHCP client configuration with fallback support
  template: src=network/dhclient.conf.j2 dest=/etc/dhcp/dhclient.conf


# Apt
- name: Configure apt repositories
  template: src=apt/sources.list.j2 dest=/etc/apt/sources.list

- name: Add imincik PPA signing key
  apt_key: data="{{ lookup('file', 'static/ppa_imincik.key') }}" state=present

- name: Configure Apt cache proxy server
  template: src=apt/02proxy.j2 dest=/etc/apt/apt.conf.d/02proxy

- name: Move apt cache to '/storage'
  shell: test -h /var/cache/apt || mv -f /var/cache/apt /storage/apt
  args:
    executable: /bin/bash

- name: Create symlink to new apt cache directory
  file: src=/storage/apt dest=/var/cache/apt state=link

- name: Update apt cache
  apt: update_cache=yes

- name: Upgrade system
  apt: upgrade=full force=yes

- name: Remove not needed packages installed with OS image
  apt: pkg={{item}} state=absent
  with_items:
    - landscape-client
    - landscape-common

- name: Install packages
  apt: pkg={{item}} force=yes install_recommends=no state=latest
  with_items:
    - htop
    - iotop
    - mc
    - pwgen
    - tmux
    - vim


# Shell
- name: Configure shell prompt system wide
  lineinfile:
    dest=/etc/profile
    regexp="^PS1=.*h\.GIS.lab(.*).*$"
    line='PS1="\[$(tput bold)\]\u@\h.GIS.lab({{ GISLAB_UNIQUE_ID }}):\w\\$\[$(tput sgr0)\] "'
    state=present


# MOTD
- name: Set MOTD header
  template: src=motd/00-header.j2 dest=/etc/update-motd.d/00-header

- name: Remove not needed MOTD messages
  shell: rm -f {{ item }}
  with_items:
    - /etc/update-motd.d/*-help-text
    - /etc/update-motd.d/*-cloudguest
    - /etc/update-motd.d/*-release-upgrade

- name: Update MOTD
  shell: run-parts /etc/update-motd.d


# GIS.lab administrator tools
- name: Install GIS.lab shell functions library
  copy: src=functions.sh dest={{ GISLAB_ROOT }}/functions.sh

- name: Install GIS.lab administrator tools
  copy: src=bin dest={{ GISLAB_ROOT }}/ mode=0775 owner=root group=root

- name: Add GIS.lab administrator tools on path
  lineinfile: dest=/etc/profile line="PATH=$PATH:{{ GISLAB_ROOT }}/bin" state=present


# /storage bind mount
- name: Configure universal '/storage to /mnt' mount to keep the same paths on server and clients
  lineinfile: dest=/etc/fstab line="/storage  /mnt  none  bind  0  0" state=present

- name: Mount '/storage' to '/mnt'
  mount: name=/mnt src=/storage fstype=none opts=bind state=mounted


# Backup
- name: Activate user accounts and system files backup
  template: src=cron/gislab-backupall.j2 dest=/etc/cron.d/gislab-backupall

# vim:ft=ansible:
